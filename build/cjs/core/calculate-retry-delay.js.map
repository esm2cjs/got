{
  "version": 3,
  "sources": ["../../esm/core/calculate-retry-delay.js"],
  "sourcesContent": ["const calculateRetryDelay = ({ attemptCount, retryOptions, error, retryAfter, computedValue, }) => {\n    if (error.name === 'RetryError') {\n        return 1;\n    }\n    if (attemptCount > retryOptions.limit) {\n        return 0;\n    }\n    const hasMethod = retryOptions.methods.includes(error.options.method);\n    const hasErrorCode = retryOptions.errorCodes.includes(error.code);\n    const hasStatusCode = error.response && retryOptions.statusCodes.includes(error.response.statusCode);\n    if (!hasMethod || (!hasErrorCode && !hasStatusCode)) {\n        return 0;\n    }\n    if (error.response) {\n        if (retryAfter) {\n            // In this case `computedValue` is `options.request.timeout`\n            if (retryAfter > computedValue) {\n                return 0;\n            }\n            return retryAfter;\n        }\n        if (error.response.statusCode === 413) {\n            return 0;\n        }\n    }\n    const noise = Math.random() * retryOptions.noise;\n    return Math.min(((2 ** (attemptCount - 1)) * 1000), retryOptions.backoffLimit) + noise;\n};\nexport default calculateRetryDelay;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAM,sBAAsB,CAAC,EAAE,cAAc,cAAc,OAAO,YAAY,cAAe,MAAM;AAC/F,MAAI,MAAM,SAAS,cAAc;AAC7B,WAAO;AAAA,EACX;AACA,MAAI,eAAe,aAAa,OAAO;AACnC,WAAO;AAAA,EACX;AACA,QAAM,YAAY,aAAa,QAAQ,SAAS,MAAM,QAAQ,MAAM;AACpE,QAAM,eAAe,aAAa,WAAW,SAAS,MAAM,IAAI;AAChE,QAAM,gBAAgB,MAAM,YAAY,aAAa,YAAY,SAAS,MAAM,SAAS,UAAU;AACnG,MAAI,CAAC,aAAc,CAAC,gBAAgB,CAAC,eAAgB;AACjD,WAAO;AAAA,EACX;AACA,MAAI,MAAM,UAAU;AAChB,QAAI,YAAY;AAEZ,UAAI,aAAa,eAAe;AAC5B,eAAO;AAAA,MACX;AACA,aAAO;AAAA,IACX;AACA,QAAI,MAAM,SAAS,eAAe,KAAK;AACnC,aAAO;AAAA,IACX;AAAA,EACJ;AACA,QAAM,QAAQ,KAAK,OAAO,IAAI,aAAa;AAC3C,SAAO,KAAK,IAAM,MAAM,eAAe,KAAM,KAAO,aAAa,YAAY,IAAI;AACrF;AACA,IAAO,gCAAQ;",
  "names": []
}
