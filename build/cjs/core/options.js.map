{
  "version": 3,
  "sources": ["../../esm/core/options.js"],
  "sourcesContent": ["import process from 'node:process';\nimport { promisify, inspect } from 'node:util';\nimport { URL, URLSearchParams } from 'node:url';\nimport { checkServerIdentity } from 'node:tls';\n// DO NOT use destructuring for `https.request` and `http.request` as it's not compatible with `nock`.\nimport http from 'node:http';\nimport https from 'node:https';\nimport is, { assert } from '@esm2cjs/is';\nimport lowercaseKeys from '@esm2cjs/lowercase-keys';\nimport CacheableLookup from '@esm2cjs/cacheable-lookup';\nimport http2wrapper from 'http2-wrapper';\nimport { isFormData } from '@esm2cjs/form-data-encoder';\nimport parseLinkHeader from './parse-link-header.js';\nconst [major, minor] = process.versions.node.split('.').map(Number);\nfunction validateSearchParameters(searchParameters) {\n    // eslint-disable-next-line guard-for-in\n    for (const key in searchParameters) {\n        const value = searchParameters[key];\n        assert.any([is.string, is.number, is.boolean, is.null_, is.undefined], value);\n    }\n}\nconst globalCache = new Map();\nlet globalDnsCache;\nconst getGlobalDnsCache = () => {\n    if (globalDnsCache) {\n        return globalDnsCache;\n    }\n    globalDnsCache = new CacheableLookup();\n    return globalDnsCache;\n};\nconst defaultInternals = {\n    request: undefined,\n    agent: {\n        http: undefined,\n        https: undefined,\n        http2: undefined,\n    },\n    h2session: undefined,\n    decompress: true,\n    timeout: {\n        connect: undefined,\n        lookup: undefined,\n        read: undefined,\n        request: undefined,\n        response: undefined,\n        secureConnect: undefined,\n        send: undefined,\n        socket: undefined,\n    },\n    prefixUrl: '',\n    body: undefined,\n    form: undefined,\n    json: undefined,\n    cookieJar: undefined,\n    ignoreInvalidCookies: false,\n    searchParams: undefined,\n    dnsLookup: undefined,\n    dnsCache: undefined,\n    context: {},\n    hooks: {\n        init: [],\n        beforeRequest: [],\n        beforeError: [],\n        beforeRedirect: [],\n        beforeRetry: [],\n        afterResponse: [],\n    },\n    followRedirect: true,\n    maxRedirects: 10,\n    cache: undefined,\n    throwHttpErrors: true,\n    username: '',\n    password: '',\n    http2: false,\n    allowGetBody: false,\n    headers: {\n        'user-agent': 'got (https://github.com/sindresorhus/got)',\n    },\n    methodRewriting: false,\n    dnsLookupIpVersion: undefined,\n    parseJson: JSON.parse,\n    stringifyJson: JSON.stringify,\n    retry: {\n        limit: 2,\n        methods: [\n            'GET',\n            'PUT',\n            'HEAD',\n            'DELETE',\n            'OPTIONS',\n            'TRACE',\n        ],\n        statusCodes: [\n            408,\n            413,\n            429,\n            500,\n            502,\n            503,\n            504,\n            521,\n            522,\n            524,\n        ],\n        errorCodes: [\n            'ETIMEDOUT',\n            'ECONNRESET',\n            'EADDRINUSE',\n            'ECONNREFUSED',\n            'EPIPE',\n            'ENOTFOUND',\n            'ENETUNREACH',\n            'EAI_AGAIN',\n        ],\n        maxRetryAfter: undefined,\n        calculateDelay: ({ computedValue }) => computedValue,\n        backoffLimit: Number.POSITIVE_INFINITY,\n        noise: 100,\n    },\n    localAddress: undefined,\n    method: 'GET',\n    createConnection: undefined,\n    cacheOptions: {\n        shared: undefined,\n        cacheHeuristic: undefined,\n        immutableMinTimeToLive: undefined,\n        ignoreCargoCult: undefined,\n    },\n    https: {\n        alpnProtocols: undefined,\n        rejectUnauthorized: undefined,\n        checkServerIdentity: undefined,\n        certificateAuthority: undefined,\n        key: undefined,\n        certificate: undefined,\n        passphrase: undefined,\n        pfx: undefined,\n        ciphers: undefined,\n        honorCipherOrder: undefined,\n        minVersion: undefined,\n        maxVersion: undefined,\n        signatureAlgorithms: undefined,\n        tlsSessionLifetime: undefined,\n        dhparam: undefined,\n        ecdhCurve: undefined,\n        certificateRevocationLists: undefined,\n    },\n    encoding: undefined,\n    resolveBodyOnly: false,\n    isStream: false,\n    responseType: 'text',\n    url: undefined,\n    pagination: {\n        transform(response) {\n            if (response.request.options.responseType === 'json') {\n                return response.body;\n            }\n            return JSON.parse(response.body);\n        },\n        paginate({ response }) {\n            const rawLinkHeader = response.headers.link;\n            if (typeof rawLinkHeader !== 'string' || rawLinkHeader.trim() === '') {\n                return false;\n            }\n            const parsed = parseLinkHeader(rawLinkHeader);\n            const next = parsed.find(entry => entry.parameters.rel === 'next' || entry.parameters.rel === '\"next\"');\n            if (next) {\n                return {\n                    url: new URL(next.reference, response.url),\n                };\n            }\n            return false;\n        },\n        filter: () => true,\n        shouldContinue: () => true,\n        countLimit: Number.POSITIVE_INFINITY,\n        backoff: 0,\n        requestLimit: 10000,\n        stackAllItems: false,\n    },\n    setHost: true,\n    maxHeaderSize: undefined,\n    signal: undefined,\n    enableUnixSockets: true,\n};\nconst cloneInternals = (internals) => {\n    const { hooks, retry } = internals;\n    const result = {\n        ...internals,\n        context: { ...internals.context },\n        cacheOptions: { ...internals.cacheOptions },\n        https: { ...internals.https },\n        agent: { ...internals.agent },\n        headers: { ...internals.headers },\n        retry: {\n            ...retry,\n            errorCodes: [...retry.errorCodes],\n            methods: [...retry.methods],\n            statusCodes: [...retry.statusCodes],\n        },\n        timeout: { ...internals.timeout },\n        hooks: {\n            init: [...hooks.init],\n            beforeRequest: [...hooks.beforeRequest],\n            beforeError: [...hooks.beforeError],\n            beforeRedirect: [...hooks.beforeRedirect],\n            beforeRetry: [...hooks.beforeRetry],\n            afterResponse: [...hooks.afterResponse],\n        },\n        searchParams: internals.searchParams ? new URLSearchParams(internals.searchParams) : undefined,\n        pagination: { ...internals.pagination },\n    };\n    if (result.url !== undefined) {\n        result.prefixUrl = '';\n    }\n    return result;\n};\nconst cloneRaw = (raw) => {\n    const { hooks, retry } = raw;\n    const result = { ...raw };\n    if (is.object(raw.context)) {\n        result.context = { ...raw.context };\n    }\n    if (is.object(raw.cacheOptions)) {\n        result.cacheOptions = { ...raw.cacheOptions };\n    }\n    if (is.object(raw.https)) {\n        result.https = { ...raw.https };\n    }\n    if (is.object(raw.cacheOptions)) {\n        result.cacheOptions = { ...result.cacheOptions };\n    }\n    if (is.object(raw.agent)) {\n        result.agent = { ...raw.agent };\n    }\n    if (is.object(raw.headers)) {\n        result.headers = { ...raw.headers };\n    }\n    if (is.object(retry)) {\n        result.retry = { ...retry };\n        if (is.array(retry.errorCodes)) {\n            result.retry.errorCodes = [...retry.errorCodes];\n        }\n        if (is.array(retry.methods)) {\n            result.retry.methods = [...retry.methods];\n        }\n        if (is.array(retry.statusCodes)) {\n            result.retry.statusCodes = [...retry.statusCodes];\n        }\n    }\n    if (is.object(raw.timeout)) {\n        result.timeout = { ...raw.timeout };\n    }\n    if (is.object(hooks)) {\n        result.hooks = {\n            ...hooks,\n        };\n        if (is.array(hooks.init)) {\n            result.hooks.init = [...hooks.init];\n        }\n        if (is.array(hooks.beforeRequest)) {\n            result.hooks.beforeRequest = [...hooks.beforeRequest];\n        }\n        if (is.array(hooks.beforeError)) {\n            result.hooks.beforeError = [...hooks.beforeError];\n        }\n        if (is.array(hooks.beforeRedirect)) {\n            result.hooks.beforeRedirect = [...hooks.beforeRedirect];\n        }\n        if (is.array(hooks.beforeRetry)) {\n            result.hooks.beforeRetry = [...hooks.beforeRetry];\n        }\n        if (is.array(hooks.afterResponse)) {\n            result.hooks.afterResponse = [...hooks.afterResponse];\n        }\n    }\n    // TODO: raw.searchParams\n    if (is.object(raw.pagination)) {\n        result.pagination = { ...raw.pagination };\n    }\n    return result;\n};\nconst getHttp2TimeoutOption = (internals) => {\n    const delays = [internals.timeout.socket, internals.timeout.connect, internals.timeout.lookup, internals.timeout.request, internals.timeout.secureConnect].filter(delay => typeof delay === 'number');\n    if (delays.length > 0) {\n        return Math.min(...delays);\n    }\n    return undefined;\n};\nconst init = (options, withOptions, self) => {\n    const initHooks = options.hooks?.init;\n    if (initHooks) {\n        for (const hook of initHooks) {\n            hook(withOptions, self);\n        }\n    }\n};\nexport default class Options {\n    constructor(input, options, defaults) {\n        Object.defineProperty(this, \"_unixOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_internals\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_merging\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_init\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        assert.any([is.string, is.urlInstance, is.object, is.undefined], input);\n        assert.any([is.object, is.undefined], options);\n        assert.any([is.object, is.undefined], defaults);\n        if (input instanceof Options || options instanceof Options) {\n            throw new TypeError('The defaults must be passed as the third argument');\n        }\n        this._internals = cloneInternals(defaults?._internals ?? defaults ?? defaultInternals);\n        this._init = [...(defaults?._init ?? [])];\n        this._merging = false;\n        this._unixOptions = undefined;\n        // This rule allows `finally` to be considered more important.\n        // Meaning no matter the error thrown in the `try` block,\n        // if `finally` throws then the `finally` error will be thrown.\n        //\n        // Yes, we want this. If we set `url` first, then the `url.searchParams`\n        // would get merged. Instead we set the `searchParams` first, then\n        // `url.searchParams` is overwritten as expected.\n        //\n        /* eslint-disable no-unsafe-finally */\n        try {\n            if (is.plainObject(input)) {\n                try {\n                    this.merge(input);\n                    this.merge(options);\n                }\n                finally {\n                    this.url = input.url;\n                }\n            }\n            else {\n                try {\n                    this.merge(options);\n                }\n                finally {\n                    if (options?.url !== undefined) {\n                        if (input === undefined) {\n                            this.url = options.url;\n                        }\n                        else {\n                            throw new TypeError('The `url` option is mutually exclusive with the `input` argument');\n                        }\n                    }\n                    else if (input !== undefined) {\n                        this.url = input;\n                    }\n                }\n            }\n        }\n        catch (error) {\n            error.options = this;\n            throw error;\n        }\n        /* eslint-enable no-unsafe-finally */\n    }\n    merge(options) {\n        if (!options) {\n            return;\n        }\n        if (options instanceof Options) {\n            for (const init of options._init) {\n                this.merge(init);\n            }\n            return;\n        }\n        options = cloneRaw(options);\n        init(this, options, this);\n        init(options, options, this);\n        this._merging = true;\n        // Always merge `isStream` first\n        if ('isStream' in options) {\n            this.isStream = options.isStream;\n        }\n        try {\n            let push = false;\n            for (const key in options) {\n                // `got.extend()` options\n                if (key === 'mutableDefaults' || key === 'handlers') {\n                    continue;\n                }\n                // Never merge `url`\n                if (key === 'url') {\n                    continue;\n                }\n                if (!(key in this)) {\n                    throw new Error(`Unexpected option: ${key}`);\n                }\n                // @ts-expect-error Type 'unknown' is not assignable to type 'never'.\n                this[key] = options[key];\n                push = true;\n            }\n            if (push) {\n                this._init.push(options);\n            }\n        }\n        finally {\n            this._merging = false;\n        }\n    }\n    /**\n    Custom request function.\n    The main purpose of this is to [support HTTP2 using a wrapper](https://github.com/szmarczak/http2-wrapper).\n\n    @default http.request | https.request\n    */\n    get request() {\n        return this._internals.request;\n    }\n    set request(value) {\n        assert.any([is.function_, is.undefined], value);\n        this._internals.request = value;\n    }\n    /**\n    An object representing `http`, `https` and `http2` keys for [`http.Agent`](https://nodejs.org/api/http.html#http_class_http_agent), [`https.Agent`](https://nodejs.org/api/https.html#https_class_https_agent) and [`http2wrapper.Agent`](https://github.com/szmarczak/http2-wrapper#new-http2agentoptions) instance.\n    This is necessary because a request to one protocol might redirect to another.\n    In such a scenario, Got will switch over to the right protocol agent for you.\n\n    If a key is not present, it will default to a global agent.\n\n    @example\n    ```\n    import got from 'got';\n    import HttpAgent from 'agentkeepalive';\n\n    const {HttpsAgent} = HttpAgent;\n\n    await got('https://sindresorhus.com', {\n        agent: {\n            http: new HttpAgent(),\n            https: new HttpsAgent()\n        }\n    });\n    ```\n    */\n    get agent() {\n        return this._internals.agent;\n    }\n    set agent(value) {\n        assert.plainObject(value);\n        // eslint-disable-next-line guard-for-in\n        for (const key in value) {\n            if (!(key in this._internals.agent)) {\n                throw new TypeError(`Unexpected agent option: ${key}`);\n            }\n            // @ts-expect-error - No idea why `value[key]` doesn't work here.\n            assert.any([is.object, is.undefined], value[key]);\n        }\n        if (this._merging) {\n            Object.assign(this._internals.agent, value);\n        }\n        else {\n            this._internals.agent = { ...value };\n        }\n    }\n    get h2session() {\n        return this._internals.h2session;\n    }\n    set h2session(value) {\n        this._internals.h2session = value;\n    }\n    /**\n    Decompress the response automatically.\n\n    This will set the `accept-encoding` header to `gzip, deflate, br` unless you set it yourself.\n\n    If this is disabled, a compressed response is returned as a `Buffer`.\n    This may be useful if you want to handle decompression yourself or stream the raw compressed data.\n\n    @default true\n    */\n    get decompress() {\n        return this._internals.decompress;\n    }\n    set decompress(value) {\n        assert.boolean(value);\n        this._internals.decompress = value;\n    }\n    /**\n    Milliseconds to wait for the server to end the response before aborting the request with `got.TimeoutError` error (a.k.a. `request` property).\n    By default, there's no timeout.\n\n    This also accepts an `object` with the following fields to constrain the duration of each phase of the request lifecycle:\n\n    - `lookup` starts when a socket is assigned and ends when the hostname has been resolved.\n        Does not apply when using a Unix domain socket.\n    - `connect` starts when `lookup` completes (or when the socket is assigned if lookup does not apply to the request) and ends when the socket is connected.\n    - `secureConnect` starts when `connect` completes and ends when the handshaking process completes (HTTPS only).\n    - `socket` starts when the socket is connected. See [request.setTimeout](https://nodejs.org/api/http.html#http_request_settimeout_timeout_callback).\n    - `response` starts when the request has been written to the socket and ends when the response headers are received.\n    - `send` starts when the socket is connected and ends with the request has been written to the socket.\n    - `request` starts when the request is initiated and ends when the response's end event fires.\n    */\n    get timeout() {\n        // We always return `Delays` here.\n        // It has to be `Delays | number`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n        return this._internals.timeout;\n    }\n    set timeout(value) {\n        assert.plainObject(value);\n        // eslint-disable-next-line guard-for-in\n        for (const key in value) {\n            if (!(key in this._internals.timeout)) {\n                throw new Error(`Unexpected timeout option: ${key}`);\n            }\n            // @ts-expect-error - No idea why `value[key]` doesn't work here.\n            assert.any([is.number, is.undefined], value[key]);\n        }\n        if (this._merging) {\n            Object.assign(this._internals.timeout, value);\n        }\n        else {\n            this._internals.timeout = { ...value };\n        }\n    }\n    /**\n    When specified, `prefixUrl` will be prepended to `url`.\n    The prefix can be any valid URL, either relative or absolute.\n    A trailing slash `/` is optional - one will be added automatically.\n\n    __Note__: `prefixUrl` will be ignored if the `url` argument is a URL instance.\n\n    __Note__: Leading slashes in `input` are disallowed when using this option to enforce consistency and avoid confusion.\n    For example, when the prefix URL is `https://example.com/foo` and the input is `/bar`, there's ambiguity whether the resulting URL would become `https://example.com/foo/bar` or `https://example.com/bar`.\n    The latter is used by browsers.\n\n    __Tip__: Useful when used with `got.extend()` to create niche-specific Got instances.\n\n    __Tip__: You can change `prefixUrl` using hooks as long as the URL still includes the `prefixUrl`.\n    If the URL doesn't include it anymore, it will throw.\n\n    @example\n    ```\n    import got from 'got';\n\n    await got('unicorn', {prefixUrl: 'https://cats.com'});\n    //=> 'https://cats.com/unicorn'\n\n    const instance = got.extend({\n        prefixUrl: 'https://google.com'\n    });\n\n    await instance('unicorn', {\n        hooks: {\n            beforeRequest: [\n                options => {\n                    options.prefixUrl = 'https://cats.com';\n                }\n            ]\n        }\n    });\n    //=> 'https://cats.com/unicorn'\n    ```\n    */\n    get prefixUrl() {\n        // We always return `string` here.\n        // It has to be `string | URL`, otherwise TypeScript will error because the getter and the setter have incompatible types.\n        return this._internals.prefixUrl;\n    }\n    set prefixUrl(value) {\n        assert.any([is.string, is.urlInstance], value);\n        if (value === '') {\n            this._internals.prefixUrl = '';\n            return;\n        }\n        value = value.toString();\n        if (!value.endsWith('/')) {\n            value += '/';\n        }\n        if (this._internals.prefixUrl && this._internals.url) {\n            const { href } = this._internals.url;\n            this._internals.url.href = value + href.slice(this._internals.prefixUrl.length);\n        }\n        this._internals.prefixUrl = value;\n    }\n    /**\n    __Note #1__: The `body` option cannot be used with the `json` or `form` option.\n\n    __Note #2__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #3__: If you provide a payload with the `GET` or `HEAD` method, it will throw a `TypeError` unless the method is `GET` and the `allowGetBody` option is set to `true`.\n\n    __Note #4__: This option is not enumerable and will not be merged with the instance defaults.\n\n    The `content-length` header will be automatically set if `body` is a `string` / `Buffer` / [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) / [`form-data` instance](https://github.com/form-data/form-data), and `content-length` and `transfer-encoding` are not manually set in `options.headers`.\n\n    Since Got 12, the `content-length` is not automatically set when `body` is a `fs.createReadStream`.\n    */\n    get body() {\n        return this._internals.body;\n    }\n    set body(value) {\n        assert.any([is.string, is.buffer, is.nodeStream, is.generator, is.asyncGenerator, isFormData, is.undefined], value);\n        if (is.nodeStream(value)) {\n            assert.truthy(value.readable);\n        }\n        if (value !== undefined) {\n            assert.undefined(this._internals.form);\n            assert.undefined(this._internals.json);\n        }\n        this._internals.body = value;\n    }\n    /**\n    The form body is converted to a query string using [`(new URLSearchParams(object)).toString()`](https://nodejs.org/api/url.html#url_constructor_new_urlsearchparams_obj).\n\n    If the `Content-Type` header is not present, it will be set to `application/x-www-form-urlencoded`.\n\n    __Note #1__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n    */\n    get form() {\n        return this._internals.form;\n    }\n    set form(value) {\n        assert.any([is.plainObject, is.undefined], value);\n        if (value !== undefined) {\n            assert.undefined(this._internals.body);\n            assert.undefined(this._internals.json);\n        }\n        this._internals.form = value;\n    }\n    /**\n    JSON body. If the `Content-Type` header is not set, it will be set to `application/json`.\n\n    __Note #1__: If you provide this option, `got.stream()` will be read-only.\n\n    __Note #2__: This option is not enumerable and will not be merged with the instance defaults.\n    */\n    get json() {\n        return this._internals.json;\n    }\n    set json(value) {\n        if (value !== undefined) {\n            assert.undefined(this._internals.body);\n            assert.undefined(this._internals.form);\n        }\n        this._internals.json = value;\n    }\n    /**\n    The URL to request, as a string, a [`https.request` options object](https://nodejs.org/api/https.html#https_https_request_options_callback), or a [WHATWG `URL`](https://nodejs.org/api/url.html#url_class_url).\n\n    Properties from `options` will override properties in the parsed `url`.\n\n    If no protocol is specified, it will throw a `TypeError`.\n\n    __Note__: The query string is **not** parsed as search params.\n\n    @example\n    ```\n    await got('https://example.com/?query=a b'); //=> https://example.com/?query=a%20b\n    await got('https://example.com/', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n\n    // The query string is overridden by `searchParams`\n    await got('https://example.com/?query=a b', {searchParams: {query: 'a b'}}); //=> https://example.com/?query=a+b\n    ```\n    */\n    get url() {\n        return this._internals.url;\n    }\n    set url(value) {\n        assert.any([is.string, is.urlInstance, is.undefined], value);\n        if (value === undefined) {\n            this._internals.url = undefined;\n            return;\n        }\n        if (is.string(value) && value.startsWith('/')) {\n            throw new Error('`url` must not start with a slash');\n        }\n        const urlString = `${this.prefixUrl}${value.toString()}`;\n        const url = new URL(urlString);\n        this._internals.url = url;\n        decodeURI(urlString);\n        if (url.protocol === 'unix:') {\n            url.href = `http://unix${url.pathname}${url.search}`;\n        }\n        if (url.protocol !== 'http:' && url.protocol !== 'https:') {\n            const error = new Error(`Unsupported protocol: ${url.protocol}`);\n            error.code = 'ERR_UNSUPPORTED_PROTOCOL';\n            throw error;\n        }\n        if (this._internals.username) {\n            url.username = this._internals.username;\n            this._internals.username = '';\n        }\n        if (this._internals.password) {\n            url.password = this._internals.password;\n            this._internals.password = '';\n        }\n        if (this._internals.searchParams) {\n            url.search = this._internals.searchParams.toString();\n            this._internals.searchParams = undefined;\n        }\n        if (url.hostname === 'unix') {\n            if (!this._internals.enableUnixSockets) {\n                throw new Error('Using UNIX domain sockets but option `enableUnixSockets` is not enabled');\n            }\n            const matches = /(?<socketPath>.+?):(?<path>.+)/.exec(`${url.pathname}${url.search}`);\n            if (matches?.groups) {\n                const { socketPath, path } = matches.groups;\n                this._unixOptions = {\n                    socketPath,\n                    path,\n                    host: '',\n                };\n            }\n            else {\n                this._unixOptions = undefined;\n            }\n            return;\n        }\n        this._unixOptions = undefined;\n    }\n    /**\n    Cookie support. You don't have to care about parsing or how to store them.\n\n    __Note__: If you provide this option, `options.headers.cookie` will be overridden.\n    */\n    get cookieJar() {\n        return this._internals.cookieJar;\n    }\n    set cookieJar(value) {\n        assert.any([is.object, is.undefined], value);\n        if (value === undefined) {\n            this._internals.cookieJar = undefined;\n            return;\n        }\n        let { setCookie, getCookieString } = value;\n        assert.function_(setCookie);\n        assert.function_(getCookieString);\n        /* istanbul ignore next: Horrible `tough-cookie` v3 check */\n        if (setCookie.length === 4 && getCookieString.length === 0) {\n            setCookie = promisify(setCookie.bind(value));\n            getCookieString = promisify(getCookieString.bind(value));\n            this._internals.cookieJar = {\n                setCookie,\n                getCookieString: getCookieString,\n            };\n        }\n        else {\n            this._internals.cookieJar = value;\n        }\n    }\n    /**\n    You can abort the `request` using [`AbortController`](https://developer.mozilla.org/en-US/docs/Web/API/AbortController).\n\n    *Requires Node.js 16 or later.*\n\n    @example\n    ```\n    import got from 'got';\n\n    const abortController = new AbortController();\n\n    const request = got('https://httpbin.org/anything', {\n        signal: abortController.signal\n    });\n\n    setTimeout(() => {\n        abortController.abort();\n    }, 100);\n    ```\n    */\n    // TODO: Replace `any` with `AbortSignal` when targeting Node 16.\n    get signal() {\n        return this._internals.signal;\n    }\n    // TODO: Replace `any` with `AbortSignal` when targeting Node 16.\n    set signal(value) {\n        assert.object(value);\n        this._internals.signal = value;\n    }\n    /**\n    Ignore invalid cookies instead of throwing an error.\n    Only useful when the `cookieJar` option has been set. Not recommended.\n\n    @default false\n    */\n    get ignoreInvalidCookies() {\n        return this._internals.ignoreInvalidCookies;\n    }\n    set ignoreInvalidCookies(value) {\n        assert.boolean(value);\n        this._internals.ignoreInvalidCookies = value;\n    }\n    /**\n    Query string that will be added to the request URL.\n    This will override the query string in `url`.\n\n    If you need to pass in an array, you can do it using a `URLSearchParams` instance.\n\n    @example\n    ```\n    import got from 'got';\n\n    const searchParams = new URLSearchParams([['key', 'a'], ['key', 'b']]);\n\n    await got('https://example.com', {searchParams});\n\n    console.log(searchParams.toString());\n    //=> 'key=a&key=b'\n    ```\n    */\n    get searchParams() {\n        if (this._internals.url) {\n            return this._internals.url.searchParams;\n        }\n        if (this._internals.searchParams === undefined) {\n            this._internals.searchParams = new URLSearchParams();\n        }\n        return this._internals.searchParams;\n    }\n    set searchParams(value) {\n        assert.any([is.string, is.object, is.undefined], value);\n        const url = this._internals.url;\n        if (value === undefined) {\n            this._internals.searchParams = undefined;\n            if (url) {\n                url.search = '';\n            }\n            return;\n        }\n        const searchParameters = this.searchParams;\n        let updated;\n        if (is.string(value)) {\n            updated = new URLSearchParams(value);\n        }\n        else if (value instanceof URLSearchParams) {\n            updated = value;\n        }\n        else {\n            validateSearchParameters(value);\n            updated = new URLSearchParams();\n            // eslint-disable-next-line guard-for-in\n            for (const key in value) {\n                const entry = value[key];\n                if (entry === null) {\n                    updated.append(key, '');\n                }\n                else if (entry === undefined) {\n                    searchParameters.delete(key);\n                }\n                else {\n                    updated.append(key, entry);\n                }\n            }\n        }\n        if (this._merging) {\n            // These keys will be replaced\n            for (const key of updated.keys()) {\n                searchParameters.delete(key);\n            }\n            for (const [key, value] of updated) {\n                searchParameters.append(key, value);\n            }\n        }\n        else if (url) {\n            url.search = searchParameters.toString();\n        }\n        else {\n            this._internals.searchParams = searchParameters;\n        }\n    }\n    get searchParameters() {\n        throw new Error('The `searchParameters` option does not exist. Use `searchParams` instead.');\n    }\n    set searchParameters(_value) {\n        throw new Error('The `searchParameters` option does not exist. Use `searchParams` instead.');\n    }\n    get dnsLookup() {\n        return this._internals.dnsLookup;\n    }\n    set dnsLookup(value) {\n        assert.any([is.function_, is.undefined], value);\n        this._internals.dnsLookup = value;\n    }\n    /**\n    An instance of [`CacheableLookup`](https://github.com/szmarczak/cacheable-lookup) used for making DNS lookups.\n    Useful when making lots of requests to different *public* hostnames.\n\n    `CacheableLookup` uses `dns.resolver4(..)` and `dns.resolver6(...)` under the hood and fall backs to `dns.lookup(...)` when the first two fail, which may lead to additional delay.\n\n    __Note__: This should stay disabled when making requests to internal hostnames such as `localhost`, `database.local` etc.\n\n    @default false\n    */\n    get dnsCache() {\n        return this._internals.dnsCache;\n    }\n    set dnsCache(value) {\n        assert.any([is.object, is.boolean, is.undefined], value);\n        if (value === true) {\n            this._internals.dnsCache = getGlobalDnsCache();\n        }\n        else if (value === false) {\n            this._internals.dnsCache = undefined;\n        }\n        else {\n            this._internals.dnsCache = value;\n        }\n    }\n    /**\n    User data. `context` is shallow merged and enumerable. If it contains non-enumerable properties they will NOT be merged.\n\n    @example\n    ```\n    import got from 'got';\n\n    const instance = got.extend({\n        hooks: {\n            beforeRequest: [\n                options => {\n                    if (!options.context || !options.context.token) {\n                        throw new Error('Token required');\n                    }\n\n                    options.headers.token = options.context.token;\n                }\n            ]\n        }\n    });\n\n    const context = {\n        token: 'secret'\n    };\n\n    const response = await instance('https://httpbin.org/headers', {context});\n\n    // Let's see the headers\n    console.log(response.body);\n    ```\n    */\n    get context() {\n        return this._internals.context;\n    }\n    set context(value) {\n        assert.object(value);\n        if (this._merging) {\n            Object.assign(this._internals.context, value);\n        }\n        else {\n            this._internals.context = { ...value };\n        }\n    }\n    /**\n    Hooks allow modifications during the request lifecycle.\n    Hook functions may be async and are run serially.\n    */\n    get hooks() {\n        return this._internals.hooks;\n    }\n    set hooks(value) {\n        assert.object(value);\n        // eslint-disable-next-line guard-for-in\n        for (const knownHookEvent in value) {\n            if (!(knownHookEvent in this._internals.hooks)) {\n                throw new Error(`Unexpected hook event: ${knownHookEvent}`);\n            }\n            const typedKnownHookEvent = knownHookEvent;\n            const hooks = value[typedKnownHookEvent];\n            assert.any([is.array, is.undefined], hooks);\n            if (hooks) {\n                for (const hook of hooks) {\n                    assert.function_(hook);\n                }\n            }\n            if (this._merging) {\n                if (hooks) {\n                    // @ts-expect-error FIXME\n                    this._internals.hooks[typedKnownHookEvent].push(...hooks);\n                }\n            }\n            else {\n                if (!hooks) {\n                    throw new Error(`Missing hook event: ${knownHookEvent}`);\n                }\n                // @ts-expect-error FIXME\n                this._internals.hooks[knownHookEvent] = [...hooks];\n            }\n        }\n    }\n    /**\n    Defines if redirect responses should be followed automatically.\n\n    Note that if a `303` is sent by the server in response to any request type (`POST`, `DELETE`, etc.), Got will automatically request the resource pointed to in the location header via `GET`.\n    This is in accordance with [the spec](https://tools.ietf.org/html/rfc7231#section-6.4.4). You can optionally turn on this behavior also for other redirect codes - see `methodRewriting`.\n\n    @default true\n    */\n    get followRedirect() {\n        return this._internals.followRedirect;\n    }\n    set followRedirect(value) {\n        assert.boolean(value);\n        this._internals.followRedirect = value;\n    }\n    get followRedirects() {\n        throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n    }\n    set followRedirects(_value) {\n        throw new TypeError('The `followRedirects` option does not exist. Use `followRedirect` instead.');\n    }\n    /**\n    If exceeded, the request will be aborted and a `MaxRedirectsError` will be thrown.\n\n    @default 10\n    */\n    get maxRedirects() {\n        return this._internals.maxRedirects;\n    }\n    set maxRedirects(value) {\n        assert.number(value);\n        this._internals.maxRedirects = value;\n    }\n    /**\n    A cache adapter instance for storing cached response data.\n\n    @default false\n    */\n    get cache() {\n        return this._internals.cache;\n    }\n    set cache(value) {\n        assert.any([is.object, is.string, is.boolean, is.undefined], value);\n        if (value === true) {\n            this._internals.cache = globalCache;\n        }\n        else if (value === false) {\n            this._internals.cache = undefined;\n        }\n        else {\n            this._internals.cache = value;\n        }\n    }\n    /**\n    Determines if a `got.HTTPError` is thrown for unsuccessful responses.\n\n    If this is disabled, requests that encounter an error status code will be resolved with the `response` instead of throwing.\n    This may be useful if you are checking for resource availability and are expecting error responses.\n\n    @default true\n    */\n    get throwHttpErrors() {\n        return this._internals.throwHttpErrors;\n    }\n    set throwHttpErrors(value) {\n        assert.boolean(value);\n        this._internals.throwHttpErrors = value;\n    }\n    get username() {\n        const url = this._internals.url;\n        const value = url ? url.username : this._internals.username;\n        return decodeURIComponent(value);\n    }\n    set username(value) {\n        assert.string(value);\n        const url = this._internals.url;\n        const fixedValue = encodeURIComponent(value);\n        if (url) {\n            url.username = fixedValue;\n        }\n        else {\n            this._internals.username = fixedValue;\n        }\n    }\n    get password() {\n        const url = this._internals.url;\n        const value = url ? url.password : this._internals.password;\n        return decodeURIComponent(value);\n    }\n    set password(value) {\n        assert.string(value);\n        const url = this._internals.url;\n        const fixedValue = encodeURIComponent(value);\n        if (url) {\n            url.password = fixedValue;\n        }\n        else {\n            this._internals.password = fixedValue;\n        }\n    }\n    /**\n    If set to `true`, Got will additionally accept HTTP2 requests.\n\n    It will choose either HTTP/1.1 or HTTP/2 depending on the ALPN protocol.\n\n    __Note__: This option requires Node.js 15.10.0 or newer as HTTP/2 support on older Node.js versions is very buggy.\n\n    __Note__: Overriding `options.request` will disable HTTP2 support.\n\n    @default false\n\n    @example\n    ```\n    import got from 'got';\n\n    const {headers} = await got('https://nghttp2.org/httpbin/anything', {http2: true});\n\n    console.log(headers.via);\n    //=> '2 nghttpx'\n    ```\n    */\n    get http2() {\n        return this._internals.http2;\n    }\n    set http2(value) {\n        assert.boolean(value);\n        this._internals.http2 = value;\n    }\n    /**\n    Set this to `true` to allow sending body for the `GET` method.\n    However, the [HTTP/2 specification](https://tools.ietf.org/html/rfc7540#section-8.1.3) says that `An HTTP GET request includes request header fields and no payload body`, therefore when using the HTTP/2 protocol this option will have no effect.\n    This option is only meant to interact with non-compliant servers when you have no other choice.\n\n    __Note__: The [RFC 7231](https://tools.ietf.org/html/rfc7231#section-4.3.1) doesn't specify any particular behavior for the GET method having a payload, therefore __it's considered an [anti-pattern](https://en.wikipedia.org/wiki/Anti-pattern)__.\n\n    @default false\n    */\n    get allowGetBody() {\n        return this._internals.allowGetBody;\n    }\n    set allowGetBody(value) {\n        assert.boolean(value);\n        this._internals.allowGetBody = value;\n    }\n    /**\n    Request headers.\n\n    Existing headers will be overwritten. Headers set to `undefined` will be omitted.\n\n    @default {}\n    */\n    get headers() {\n        return this._internals.headers;\n    }\n    set headers(value) {\n        assert.plainObject(value);\n        if (this._merging) {\n            Object.assign(this._internals.headers, lowercaseKeys(value));\n        }\n        else {\n            this._internals.headers = lowercaseKeys(value);\n        }\n    }\n    /**\n    Specifies if the HTTP request method should be [rewritten as `GET`](https://tools.ietf.org/html/rfc7231#section-6.4) on redirects.\n\n    As the [specification](https://tools.ietf.org/html/rfc7231#section-6.4) prefers to rewrite the HTTP method only on `303` responses, this is Got's default behavior.\n    Setting `methodRewriting` to `true` will also rewrite `301` and `302` responses, as allowed by the spec. This is the behavior followed by `curl` and browsers.\n\n    __Note__: Got never performs method rewriting on `307` and `308` responses, as this is [explicitly prohibited by the specification](https://www.rfc-editor.org/rfc/rfc7231#section-6.4.7).\n\n    @default false\n    */\n    get methodRewriting() {\n        return this._internals.methodRewriting;\n    }\n    set methodRewriting(value) {\n        assert.boolean(value);\n        this._internals.methodRewriting = value;\n    }\n    /**\n    Indicates which DNS record family to use.\n\n    Values:\n    - `undefined`: IPv4 (if present) or IPv6\n    - `4`: Only IPv4\n    - `6`: Only IPv6\n\n    @default undefined\n    */\n    get dnsLookupIpVersion() {\n        return this._internals.dnsLookupIpVersion;\n    }\n    set dnsLookupIpVersion(value) {\n        if (value !== undefined && value !== 4 && value !== 6) {\n            throw new TypeError(`Invalid DNS lookup IP version: ${value}`);\n        }\n        this._internals.dnsLookupIpVersion = value;\n    }\n    /**\n    A function used to parse JSON responses.\n\n    @example\n    ```\n    import got from 'got';\n    import Bourne from '@hapi/bourne';\n\n    const parsed = await got('https://example.com', {\n        parseJson: text => Bourne.parse(text)\n    }).json();\n\n    console.log(parsed);\n    ```\n    */\n    get parseJson() {\n        return this._internals.parseJson;\n    }\n    set parseJson(value) {\n        assert.function_(value);\n        this._internals.parseJson = value;\n    }\n    /**\n    A function used to stringify the body of JSON requests.\n\n    @example\n    ```\n    import got from 'got';\n\n    await got.post('https://example.com', {\n        stringifyJson: object => JSON.stringify(object, (key, value) => {\n            if (key.startsWith('_')) {\n                return;\n            }\n\n            return value;\n        }),\n        json: {\n            some: 'payload',\n            _ignoreMe: 1234\n        }\n    });\n    ```\n\n    @example\n    ```\n    import got from 'got';\n\n    await got.post('https://example.com', {\n        stringifyJson: object => JSON.stringify(object, (key, value) => {\n            if (typeof value === 'number') {\n                return value.toString();\n            }\n\n            return value;\n        }),\n        json: {\n            some: 'payload',\n            number: 1\n        }\n    });\n    ```\n    */\n    get stringifyJson() {\n        return this._internals.stringifyJson;\n    }\n    set stringifyJson(value) {\n        assert.function_(value);\n        this._internals.stringifyJson = value;\n    }\n    /**\n    An object representing `limit`, `calculateDelay`, `methods`, `statusCodes`, `maxRetryAfter` and `errorCodes` fields for maximum retry count, retry handler, allowed methods, allowed status codes, maximum [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) time and allowed error codes.\n\n    Delays between retries counts with function `1000 * Math.pow(2, retry) + Math.random() * 100`, where `retry` is attempt number (starts from 1).\n\n    The `calculateDelay` property is a `function` that receives an object with `attemptCount`, `retryOptions`, `error` and `computedValue` properties for current retry count, the retry options, error and default computed value.\n    The function must return a delay in milliseconds (or a Promise resolving with it) (`0` return value cancels retry).\n\n    By default, it retries *only* on the specified methods, status codes, and on these network errors:\n\n    - `ETIMEDOUT`: One of the [timeout](#timeout) limits were reached.\n    - `ECONNRESET`: Connection was forcibly closed by a peer.\n    - `EADDRINUSE`: Could not bind to any free port.\n    - `ECONNREFUSED`: Connection was refused by the server.\n    - `EPIPE`: The remote side of the stream being written has been closed.\n    - `ENOTFOUND`: Couldn't resolve the hostname to an IP address.\n    - `ENETUNREACH`: No internet connection.\n    - `EAI_AGAIN`: DNS lookup timed out.\n\n    __Note__: If `maxRetryAfter` is set to `undefined`, it will use `options.timeout`.\n    __Note__: If [`Retry-After`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After) header is greater than `maxRetryAfter`, it will cancel the request.\n    */\n    get retry() {\n        return this._internals.retry;\n    }\n    set retry(value) {\n        assert.plainObject(value);\n        assert.any([is.function_, is.undefined], value.calculateDelay);\n        assert.any([is.number, is.undefined], value.maxRetryAfter);\n        assert.any([is.number, is.undefined], value.limit);\n        assert.any([is.array, is.undefined], value.methods);\n        assert.any([is.array, is.undefined], value.statusCodes);\n        assert.any([is.array, is.undefined], value.errorCodes);\n        assert.any([is.number, is.undefined], value.noise);\n        if (value.noise && Math.abs(value.noise) > 100) {\n            throw new Error(`The maximum acceptable retry noise is +/- 100ms, got ${value.noise}`);\n        }\n        for (const key in value) {\n            if (!(key in this._internals.retry)) {\n                throw new Error(`Unexpected retry option: ${key}`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.retry, value);\n        }\n        else {\n            this._internals.retry = { ...value };\n        }\n        const { retry } = this._internals;\n        retry.methods = [...new Set(retry.methods.map(method => method.toUpperCase()))];\n        retry.statusCodes = [...new Set(retry.statusCodes)];\n        retry.errorCodes = [...new Set(retry.errorCodes)];\n    }\n    /**\n    From `http.RequestOptions`.\n\n    The IP address used to send the request from.\n    */\n    get localAddress() {\n        return this._internals.localAddress;\n    }\n    set localAddress(value) {\n        assert.any([is.string, is.undefined], value);\n        this._internals.localAddress = value;\n    }\n    /**\n    The HTTP method used to make the request.\n\n    @default 'GET'\n    */\n    get method() {\n        return this._internals.method;\n    }\n    set method(value) {\n        assert.string(value);\n        this._internals.method = value.toUpperCase();\n    }\n    get createConnection() {\n        return this._internals.createConnection;\n    }\n    set createConnection(value) {\n        assert.any([is.function_, is.undefined], value);\n        this._internals.createConnection = value;\n    }\n    /**\n    From `http-cache-semantics`\n\n    @default {}\n    */\n    get cacheOptions() {\n        return this._internals.cacheOptions;\n    }\n    set cacheOptions(value) {\n        assert.plainObject(value);\n        assert.any([is.boolean, is.undefined], value.shared);\n        assert.any([is.number, is.undefined], value.cacheHeuristic);\n        assert.any([is.number, is.undefined], value.immutableMinTimeToLive);\n        assert.any([is.boolean, is.undefined], value.ignoreCargoCult);\n        for (const key in value) {\n            if (!(key in this._internals.cacheOptions)) {\n                throw new Error(`Cache option \\`${key}\\` does not exist`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.cacheOptions, value);\n        }\n        else {\n            this._internals.cacheOptions = { ...value };\n        }\n    }\n    /**\n    Options for the advanced HTTPS API.\n    */\n    get https() {\n        return this._internals.https;\n    }\n    set https(value) {\n        assert.plainObject(value);\n        assert.any([is.boolean, is.undefined], value.rejectUnauthorized);\n        assert.any([is.function_, is.undefined], value.checkServerIdentity);\n        assert.any([is.string, is.object, is.array, is.undefined], value.certificateAuthority);\n        assert.any([is.string, is.object, is.array, is.undefined], value.key);\n        assert.any([is.string, is.object, is.array, is.undefined], value.certificate);\n        assert.any([is.string, is.undefined], value.passphrase);\n        assert.any([is.string, is.buffer, is.array, is.undefined], value.pfx);\n        assert.any([is.array, is.undefined], value.alpnProtocols);\n        assert.any([is.string, is.undefined], value.ciphers);\n        assert.any([is.string, is.buffer, is.undefined], value.dhparam);\n        assert.any([is.string, is.undefined], value.signatureAlgorithms);\n        assert.any([is.string, is.undefined], value.minVersion);\n        assert.any([is.string, is.undefined], value.maxVersion);\n        assert.any([is.boolean, is.undefined], value.honorCipherOrder);\n        assert.any([is.number, is.undefined], value.tlsSessionLifetime);\n        assert.any([is.string, is.undefined], value.ecdhCurve);\n        assert.any([is.string, is.buffer, is.array, is.undefined], value.certificateRevocationLists);\n        for (const key in value) {\n            if (!(key in this._internals.https)) {\n                throw new Error(`HTTPS option \\`${key}\\` does not exist`);\n            }\n        }\n        if (this._merging) {\n            Object.assign(this._internals.https, value);\n        }\n        else {\n            this._internals.https = { ...value };\n        }\n    }\n    /**\n    [Encoding](https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings) to be used on `setEncoding` of the response data.\n\n    To get a [`Buffer`](https://nodejs.org/api/buffer.html), you need to set `responseType` to `buffer` instead.\n    Don't set this option to `null`.\n\n    __Note__: This doesn't affect streams! Instead, you need to do `got.stream(...).setEncoding(encoding)`.\n\n    @default 'utf-8'\n    */\n    get encoding() {\n        return this._internals.encoding;\n    }\n    set encoding(value) {\n        if (value === null) {\n            throw new TypeError('To get a Buffer, set `options.responseType` to `buffer` instead');\n        }\n        assert.any([is.string, is.undefined], value);\n        this._internals.encoding = value;\n    }\n    /**\n    When set to `true` the promise will return the Response body instead of the Response object.\n\n    @default false\n    */\n    get resolveBodyOnly() {\n        return this._internals.resolveBodyOnly;\n    }\n    set resolveBodyOnly(value) {\n        assert.boolean(value);\n        this._internals.resolveBodyOnly = value;\n    }\n    /**\n    Returns a `Stream` instead of a `Promise`.\n    This is equivalent to calling `got.stream(url, options?)`.\n\n    @default false\n    */\n    get isStream() {\n        return this._internals.isStream;\n    }\n    set isStream(value) {\n        assert.boolean(value);\n        this._internals.isStream = value;\n    }\n    /**\n    The parsing method.\n\n    The promise also has `.text()`, `.json()` and `.buffer()` methods which return another Got promise for the parsed body.\n\n    It's like setting the options to `{responseType: 'json', resolveBodyOnly: true}` but without affecting the main Got promise.\n\n    __Note__: When using streams, this option is ignored.\n\n    @example\n    ```\n    const responsePromise = got(url);\n    const bufferPromise = responsePromise.buffer();\n    const jsonPromise = responsePromise.json();\n\n    const [response, buffer, json] = Promise.all([responsePromise, bufferPromise, jsonPromise]);\n    // `response` is an instance of Got Response\n    // `buffer` is an instance of Buffer\n    // `json` is an object\n    ```\n\n    @example\n    ```\n    // This\n    const body = await got(url).json();\n\n    // is semantically the same as this\n    const body = await got(url, {responseType: 'json', resolveBodyOnly: true});\n    ```\n    */\n    get responseType() {\n        return this._internals.responseType;\n    }\n    set responseType(value) {\n        if (value === undefined) {\n            this._internals.responseType = 'text';\n            return;\n        }\n        if (value !== 'text' && value !== 'buffer' && value !== 'json') {\n            throw new Error(`Invalid \\`responseType\\` option: ${value}`);\n        }\n        this._internals.responseType = value;\n    }\n    get pagination() {\n        return this._internals.pagination;\n    }\n    set pagination(value) {\n        assert.object(value);\n        if (this._merging) {\n            Object.assign(this._internals.pagination, value);\n        }\n        else {\n            this._internals.pagination = value;\n        }\n    }\n    get auth() {\n        throw new Error('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n    }\n    set auth(_value) {\n        throw new Error('Parameter `auth` is deprecated. Use `username` / `password` instead.');\n    }\n    get setHost() {\n        return this._internals.setHost;\n    }\n    set setHost(value) {\n        assert.boolean(value);\n        this._internals.setHost = value;\n    }\n    get maxHeaderSize() {\n        return this._internals.maxHeaderSize;\n    }\n    set maxHeaderSize(value) {\n        assert.any([is.number, is.undefined], value);\n        this._internals.maxHeaderSize = value;\n    }\n    get enableUnixSockets() {\n        return this._internals.enableUnixSockets;\n    }\n    set enableUnixSockets(value) {\n        assert.boolean(value);\n        this._internals.enableUnixSockets = value;\n    }\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    toJSON() {\n        return { ...this._internals };\n    }\n    [Symbol.for('nodejs.util.inspect.custom')](_depth, options) {\n        return inspect(this._internals, options);\n    }\n    createNativeRequestOptions() {\n        const internals = this._internals;\n        const url = internals.url;\n        let agent;\n        if (url.protocol === 'https:') {\n            agent = internals.http2 ? internals.agent : internals.agent.https;\n        }\n        else {\n            agent = internals.agent.http;\n        }\n        const { https } = internals;\n        let { pfx } = https;\n        if (is.array(pfx) && is.plainObject(pfx[0])) {\n            pfx = pfx.map(object => ({\n                buf: object.buffer,\n                passphrase: object.passphrase,\n            }));\n        }\n        return {\n            ...internals.cacheOptions,\n            ...this._unixOptions,\n            // HTTPS options\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            ALPNProtocols: https.alpnProtocols,\n            ca: https.certificateAuthority,\n            cert: https.certificate,\n            key: https.key,\n            passphrase: https.passphrase,\n            pfx: https.pfx,\n            rejectUnauthorized: https.rejectUnauthorized,\n            checkServerIdentity: https.checkServerIdentity ?? checkServerIdentity,\n            ciphers: https.ciphers,\n            honorCipherOrder: https.honorCipherOrder,\n            minVersion: https.minVersion,\n            maxVersion: https.maxVersion,\n            sigalgs: https.signatureAlgorithms,\n            sessionTimeout: https.tlsSessionLifetime,\n            dhparam: https.dhparam,\n            ecdhCurve: https.ecdhCurve,\n            crl: https.certificateRevocationLists,\n            // HTTP options\n            lookup: internals.dnsLookup ?? internals.dnsCache?.lookup,\n            family: internals.dnsLookupIpVersion,\n            agent,\n            setHost: internals.setHost,\n            method: internals.method,\n            maxHeaderSize: internals.maxHeaderSize,\n            localAddress: internals.localAddress,\n            headers: internals.headers,\n            createConnection: internals.createConnection,\n            timeout: internals.http2 ? getHttp2TimeoutOption(internals) : undefined,\n            // HTTP/2 options\n            h2session: internals.h2session,\n        };\n    }\n    getRequestFunction() {\n        const url = this._internals.url;\n        const { request } = this._internals;\n        if (!request && url) {\n            return this.getFallbackRequestFunction();\n        }\n        return request;\n    }\n    getFallbackRequestFunction() {\n        const url = this._internals.url;\n        if (!url) {\n            return;\n        }\n        if (url.protocol === 'https:') {\n            if (this._internals.http2) {\n                if (major < 15 || (major === 15 && minor < 10)) {\n                    const error = new Error('To use the `http2` option, install Node.js 15.10.0 or above');\n                    error.code = 'EUNSUPPORTED';\n                    throw error;\n                }\n                return http2wrapper.auto;\n            }\n            return https.request;\n        }\n        return http.request;\n    }\n    freeze() {\n        const options = this._internals;\n        Object.freeze(options);\n        Object.freeze(options.hooks);\n        Object.freeze(options.hooks.afterResponse);\n        Object.freeze(options.hooks.beforeError);\n        Object.freeze(options.hooks.beforeRedirect);\n        Object.freeze(options.hooks.beforeRequest);\n        Object.freeze(options.hooks.beforeRetry);\n        Object.freeze(options.hooks.init);\n        Object.freeze(options.https);\n        Object.freeze(options.cacheOptions);\n        Object.freeze(options.agent);\n        Object.freeze(options.headers);\n        Object.freeze(options.timeout);\n        Object.freeze(options.retry);\n        Object.freeze(options.retry.errorCodes);\n        Object.freeze(options.retry.methods);\n        Object.freeze(options.retry.statusCodes);\n    }\n}\n"],
  "mappings": "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",
  "names": ["process", "is", "CacheableLookup", "parseLinkHeader", "init", "value", "lowercaseKeys", "https", "http2wrapper", "http"]
}
